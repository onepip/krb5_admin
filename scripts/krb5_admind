#!/usr/pkg/bin/perl

use IO::File;

use Getopt::Std;
use Socket;
use Sys::Hostname;
use Sys::Syslog;

use Kharon::Protocol::ArrayHash;
use Kharon::Engine::Server;
use Kharon::Entitlement::ACLFile;
use Kharon::Entitlement::Equals;
use Kharon::Entitlement::Object;
use Kharon::Entitlement::Or;

use Krb5Admin::KerberosDB;
use Krb5Admin::Log;

use strict;
use warnings;

use constant {
	KRB5_ADMIND_CONFIG	=> '/etc/krb5/krb5_admind.conf',
        ACL_FILE                => '/etc/krb5/krb5_admin.acl',
};

sub usage {

	print STDERR "Usage: krb5_admind [-M] [-a acl_file] [-d dbname] " .
	    "[-m master]\n";
	exit(1);
}

openlog('krb5_admind', 'pid', 'auth');

our $acl_file = ACL_FILE;
our $config = KRB5_ADMIND_CONFIG;
our $dbname;
our $allow_fetch;
our $master;
our %xrealm_bootstrap;
our %win_xrealm_bootstrap;
our %prestash_xrealm;

our %opts;
getopts('MPa:c:d:m:', \%opts) or usage();

$master   = hostname()		if  defined($opts{M});
$master   = $opts{m}		if !defined($master);
$acl_file = $opts{a}		if  defined($opts{a});
$dbname   = $opts{d}		if  defined($opts{d});
$config   = $opts{c}		if  defined($opts{c});

if (-f $config || defined($opts{c})) {
	my $ret = do $config;
	die "Couldn't parse $config: $@\n"	if $@;
	die "Couldn't find $config\n"		if ! -f $config;
}

my $logger = Krb5Admin::Log->new();
my $ahr = Kharon::Protocol::ArrayHash->new(banner => { version => '2.0' } );
my $pes = Kharon::Engine::Server->new(protocols => [$ahr], logger => $logger);
$pes->Connect();

sub mk_kmdb {
	my %args = @_;
	my $ret;

	my $acl     = Kharon::Entitlement::Or->new();
	my $objacl  = Kharon::Entitlement::Object->new();
	my $subacls = Kharon::Entitlement::Equals->new();
	my $aclfile = Kharon::Entitlement::ACLFile->new(filename => $acl_file,
	    subobject => $subacls);

print STDERR "Kharon::Entitlement::Or has version: " . $acl->VERSION() . "\n";

	$acl->set_creds($args{CREDS});
	$acl->set_subobjects($aclfile, $objacl);
	$acl->set_opt('throw', 1);

	$pes->set_acl($acl);

	my %kmdb_args = (
		acl			=> $acl,
		client			=> $args{CREDS},
		addr			=> $args{REMOTE_IP},
		allow_fetch		=> $allow_fetch,
		xrealm_bootstrap	=> \%xrealm_bootstrap,
		win_xrealm_bootstrap	=> \%win_xrealm_bootstrap,
		prestash_xrealm		=> \%prestash_xrealm,
		dbname			=> $dbname,
		kharon_doing_acls	=> 1,
	);
	syslog('info', '%s connected from %s', $args{CREDS},
	    $args{REMOTE_IP});

	$ret = Krb5Admin::KerberosDB->new(%kmdb_args);

	$objacl->set_subobject($ret);

	return $ret;
}

my %args;
$args{master} = $master		if defined($master);

if ($opts{P}) {
	$args{object}	= \&mk_kmdb;
	$pes->RunKncAcceptor(%args);
} else {
	$args{object}	= &mk_kmdb(CREDS => $ENV{KNC_CREDS},
	    REMOTE_IP => $ENV{KNC_REMOTE_IP});
	$pes->RunObj(%args);
}
